# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
model1 <- lm(price ~ horsepower, data=CarPriceAssigment)
summary(model1)
# Inspectarea autocorelarii cu ajutorul graficului ACF (autocorelare)
acf(model1$residuals)
# Testul Durbin-Watson (ordinul 1)
dwtest(model1) # p-value < 0.1 => reziduurile sunt autocorelate
# Testul Breusch-Godfrey (order superior)
bgtest(model1) # p-value < 0.1
bgtest(model1, order = 2) # =>
bgtest(model1, order = 3)
# Cream un nou set de date
econ_data <- data.frame(CarPriceAssigment, resid_mod1=model1$residuals)
# Cream variabila lag1
econ_data_1 <- slide(econ_data, Var="resid_mod1", NewVar = "lag1", slideBy = -1)
econ_data_2 <- na.omit(econ_data_1) # eliminam valorile NA
# Reimplementam modelul cu noua variabila lag1 adaugata in model
model2 <- lm(price ~ horsepower + lag1, data=econ_data_2)
# Retestam ipoteza pe noul model
# ACF
acf(model2$residuals) # autocorelarea a disparut
# Durbin Watson
dwtest(model2) # p-value > 0.1 => reziduuri nonautocorelate
# Breusch-Godfrey
bgtest(model2) # p-value > 0.1 => reziduuri nonautocorelate
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
CarPriceAssigment <- CarPriceAssigment[-c(17,18,48,49,50,67,71,72,73,74,75,76,106,129,130), ]
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
CarPriceAssigment <- CarPriceAssigment[-c(17,18,48,49,50,67,71,72,73,74,75,76,106,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,15,16,28,62,63,64,71,90,91,92,112,114,115,165,189,190), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(8,12,13,101,150,151,152,163,173), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,90,135), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(5,9,84,85), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,7,49,61,62,81,82,149,152), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(87,119,130,141), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,120,140), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(85,124,137), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(86), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
CarPriceAssigment <- CarPriceAssigment[-c(17,18,48,49,50,67,71,72,73,74,75,76,106,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,15,16,28,62,63,64,71,90,91,92,112,114,115,165,189,190), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(8,12,13,101,150,151,152,163,173), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,90,135), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(5,9,84,85), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,7,49,61,62,81,82,149,152), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(87,119,130,141), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,120,140), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(85,124,137), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(86), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,5,46,75,76,120,136), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,72,81,118,120,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(67,80), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(3,78,121), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(38,39,47,48,67,103), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(1,8,25,61,65,92,98,99), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(10,59,84,87), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(43,96), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
model_CarPriceAssigmentHT <- lm(price ~ horsepower, CarPriceAssigment)
summary(model_CarPriceAssigmentHT)
# De aceasta data, folosind forma functionala log-log pare ca reziduurile sunt homoscedastice.
# Testam ipotezele pe reziduuri si incepem cu homoscedasticitate  ----
model_CarPriceAssigment <- lm(formula = price ~ horsepower, data = CarPriceAssigment)
summary(model_CarPriceAssigment)
bptest(model_CarPriceAssigment) # hetero
white_test(model_CarPriceAssigment) # hetero
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
# De aceasta data, folosind forma functionala log-log pare ca reziduurile sunt homoscedastice.
# Testam ipotezele pe reziduuri si incepem cu homoscedasticitate  ----
model_CarPriceAssigment <- lm(formula = price ~ horsepower, data = CarPriceAssigment)
summary(model_CarPriceAssigment)
bptest(model_CarPriceAssigment) # hetero
white_test(model_CarPriceAssigment) # hetero
coeftest(model_CarPriceAssigment, vcov. = vcovHC(model_CarPriceAssigment, type = "HC1"))# hetero
# ipoteza incalcata => corectie prin WLS (se poate si prin log-log)
model_WLS1 <- lm(formula = price ~ horsepower,
data = CarPriceAssigment, weights = 1/horsepower)
CarPriceAssigment %<>% mutate(pricestar = price/sqrt(horsepower),
horsepowerstar = horsepower/sqrt(horsepower),
constantstar = 1/sqrt(horsepower)
)
model_WLS2 <- lm(pricestar ~ 0 + constantstar + horsepowerstar,
CarPriceAssigment)
bptest(model_WLS2) # hetero
white_test(model_WLS2) # hetero
coeftest(model_WLS2, vcov. = vcovHC(model_WLS2, type = "HC1"))
model1 <- lm(price ~ horsepower, data=CarPriceAssigment)
summary(model1)
# Inspectarea autocorelarii cu ajutorul graficului ACF (autocorelare)
acf(model1$residuals)
# Testul Durbin-Watson (ordinul 1)
dwtest(model1) # p-value < 0.1 => reziduurile sunt autocorelate
# Testul Breusch-Godfrey (order superior)
bgtest(model1) # p-value < 0.1
# Cream un nou set de date
econ_data <- data.frame(CarPriceAssigment, resid_mod1=model1$residuals)
# Cream variabila lag1
econ_data_1 <- slide(econ_data, Var="resid_mod1", NewVar = "lag1", slideBy = -1)
econ_data_2 <- na.omit(econ_data_1) # eliminam valorile NA
# Reimplementam modelul cu noua variabila lag1 adaugata in model
model2 <- lm(price ~ horsepower + lag1, data=econ_data_2)
# Retestam ipoteza pe noul model
# ACF
acf(model2$residuals) # autocorelarea a disparut
# Durbin Watson
dwtest(model2) # p-value > 0.1 => reziduuri nonautocorelate
# Breusch-Godfrey
bgtest(model2) # p-value > 0.1 => reziduuri nonautocorelate
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
CarPriceAssigment <- CarPriceAssigment[-c(17,18,48,49,50,67,71,72,73,74,75,76,106,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,15,16,28,62,63,64,71,90,91,92,112,114,115,165,189,190), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(8,12,13,101,150,151,152,163,173), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,90,135), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(5,9,84,85), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,7,49,61,62,81,82,149,152), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(87,119,130,141), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,120,140), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(85,124,137), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(86), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,5,46,75,76,120,136), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,72,81,118,120,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols
CarPriceAssigment <- CarPriceAssigment[-c(54,72,81,118,120,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_0 <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_0)
CarPriceAssigment <- CarPriceAssigment[-c(17,18,48,49,50,67,71,72,73,74,75,76,106,129,130), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,15,16,28,62,63,64,71,90,91,92,112,114,115,165,189,190), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(8,12,13,101,150,151,152,163,173), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(54,90,135), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(7,85,87,137), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(5,9,84,85), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,7,49,61,62,81,82,149,152), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(87,119,130,141), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(4,126,140), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(85), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(136), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(86), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(70), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(73), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(111,132), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(3,50,51,83,112), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,39,71,107), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(49,66,97), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(92,93,104), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(12,48,93), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(61,103), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,95,103), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(49,94,105), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,23), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(84), ]
model_corr <- lm(price ~ horsepower,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
# => ipoteza acceptata
# Testam ipotezele pe reziduuri si incepem cu homoscedasticitate  ----
model_multiple2 <- lm(formula = price ~ horsepower + enginesize + citympg, data = CarPriceAssigment)
summary(model_multiple2)
bptest(model_multiple2) # hetero
white_test(model_multiple2) # hetero
# si variabilele independente horsepower si enginesize si citympg
model1 <- lm(price ~ horsepower + enginesize + citympg, data=CarPriceAssigment)
summary(model1)
# Inspectarea autocorelarii cu ajutorul graficului ACF (autocorelare)
acf(model1$residuals)
# Testul Durbin-Watson (ordinul 1)
dwtest(model1) # p-value < 0.1 => reziduurile sunt autocorelate
bgtest(model1) # p-value < 0.1
# Cream un nou set de date
econ_data <- data.frame(CarPriceAssigment, resid_mod1=model1$residuals)
# Cream variabila lag1
econ_data_1 <- slide(econ_data, Var="resid_mod1", NewVar = "lag1", slideBy = -1)
econ_data_2 <- na.omit(econ_data_1) # eliminam valorile NA
# Reimplementam modelul cu noua variabila lag1 adaugata in model
model2 <- lm(price ~ horsepower + enginesize + citympg + lag1, data=econ_data_2)
# Retestam ipoteza pe noul model
# ACF
acf(model2$residuals) # autocorelarea a disparut
# Durbin Watson
dwtest(model2) # p-value > 0.1 => reziduuri nonautocorelate
# Breusch-Godfrey
bgtest(model2)
bgtest(model2, order = 2)
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_multiple2 <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
model_corr = model_multiple2
ols_plot_cooksd_bar(model_corr)
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
model_multiple2 <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
model_corr = model_multiple2
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
model_multiple2 <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
model_corr = model_multiple2
ols_plot_cooksd_bar(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(9,17,18,19,50,57,58,59,71,72,73,75,102,103,104,106,127,128,129), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(15,27,45,51,59,60,61,62,63,90,111,118,119,186), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(11,14,42,62,88,90,99,100,136,148,149,161,167,168,172), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(8,9,10,11,12,23,37,38,92,83,85,86,128,129,138,156,157), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(5,7,43,52,58,74,75,81,116,118,124,130), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,4,28,39,48,49,77,78,108,127,128), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(3,24,68,88,105,107,117), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(35,89,108), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(2,41,58), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
CarPriceAssigment <- CarPriceAssigment[-c(75), ]
model_corr <- lm(price ~ horsepower + enginesize + citympg,CarPriceAssigment)
ols_plot_cooksd_chart(model_corr)
# Testul Shapiro Wilk pentru normalitate
shapiro.test(CarPriceAssigment$price)
shapiro.test(CarPriceAssigment$lprice)
# Testul Jarque-Bera pentru normalitate
jarque.bera.test(CarPriceAssigment$price)
jarque.bera.test(CarPriceAssigment$lprice)
# Setare fisier de lucru
rm(list = ls())
directory <- "D:/Facultate/Econometrie/proiect_econometrie2/"
# Instalarea pachetelor
PackageNames <- c("readxl","dplyr","tidyverse", "stargazer", "magrittr", "ggplot2", "lmtest", "DataCombine", "dplyr", "tseries", "caret", "car", "olsrr", "moments", "whitestrap", "plm", "nortest", "Metrics", "MLmetrics")
for(i in PackageNames){
if(!require(i, character.only = T)){
install.packages(i, dependencies = T)
require(i, character.only = T)
}
}
CarPriceAssigment <- read_excel("CarPriceAssigment.xlsx")
